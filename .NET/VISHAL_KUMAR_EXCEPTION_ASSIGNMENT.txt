
Q1. Identify all exceptions and handle it in most appropriate and efficient ways using try, catch and finally block. Print each exception one by one using console.writeline();

namespace ExceptionHandling
{
    class Program
    {
        static void Main(string[] args)
        {
            Student st;
            st = new Student();

            try
            {
                Student st1 = null;
                int roll = st1.rollno;
            }
            catch (NullReferenceException e)
            {
                Console.WriteLine(e.Message);
            }

            st.ListWeek();
            st.LoadFile();
            st.IntToByte();

        }
    }

    public class Student
    {
        public int rollno { get; set; }

        public void ListWeek()
        {

            string[] list = new string[5];
            list[0] = "Sunday";
            list[1] = "Monday";
            list[2] = "Tuesday";
            list[3] = "Wednesday";
            list[4] = "Thursday";

            try
            {
                for (int i = 0; i <= 5; i++)
                {
                    Console.WriteLine(list[i].ToString());
                }
                Console.ReadLine();
            }
            catch (IndexOutOfRangeException e)
            {
                Console.WriteLine(e.Message);
            }
        }

        public void IntToByte()
        {
            int num1, num2;
            byte result;

            num1 = 30;
            num2 = 60;
            try
            {
                result = Convert.ToByte(num1 * num2);
                Console.WriteLine("{0} x {1} = {2}", num1, num2, result);
            }
            catch (OverflowException e)
            {
                Console.WriteLine(e.Message);
            }
            Console.ReadLine();
        }

        public void LoadFile()
        {
            int counter = 0;
            StreamReader file = null;
            string ln;
            try
            {
                string textFile = "input11.txt";
                using (file = new StreamReader(textFile))
                {
                    while ((ln = file.ReadLine()) != null)
                    {
                        Console.WriteLine(ln);
                        counter++;
                    }
                    Console.WriteLine($"File has {counter} lines.");
                }
            }
            catch (FileNotFoundException e)
            {
                Console.WriteLine(e.Message);
            }
            catch (IOException e)
            {
                Console.WriteLine(e.Message);
            }
          
        }

    }
}

Q2. {5, 8, 2, 1, 5, 8, 9, 12}
Store these numbers into list and print each no. from list. Remove all 5 from list.

-->Ans)
using System;
using System.Collections.Generic;

namespace ExceptionHandling
{
    internal class Program
    {
        static void Main(string[] args)
        {
            List<int> num = new List<int>();
            num.Add(5);
            num.Add(8);
            num.Add(2);
            num.Add(5);
            num.Add(8);
            num.Add(9);
            num.Add(12);


            Console.WriteLine("The Element of List are :");
            foreach (var i in num)
            {
                Console.WriteLine(i);
            }

            num.RemoveAll(i => i == 5);

            Console.WriteLine("The Element of List After deleting all 5 are :");
            foreach (var i in num)
            {
                Console.WriteLine(i);
            }
        }
    }
}

Q3. 
{1 : "Dheeraj"}
{2: "Rakesh"}
{2: "Suresh"}
{2: "Mukesh"}
{3: "Tina"}
{4: "Alisha"}
{5: "Jennifer"}
{6:"Nadia"}
Arrange these into key-value pairs into any appropriate collection. These have also duplicate keys. 
Then Arrange all unique key-value into sorted dictionary. Print values of all keys from dictionary.
-->Ans)

using System;
using System.Collections.Generic;

namespace ExceptionHandling
{
    internal class Program
    {
        static void Main(string[] args)
        {
           Dictionary<int,List<string>> dictionary= new Dictionary<int, List<String>>();
           dictionary.Add(1, new List<string>{ "Dheeraj"});
           dictionary.Add(2, new List<string>{ "Rajesh","Suresh" ,"Mukesh" });
           dictionary.Add(3, new List<string>{ "Tina"});
           dictionary.Add(4, new List<string>{ "Alisha"});
           dictionary.Add(5, new List<string>{ "Jennifer"});
           dictionary.Add(6, new List<string>{ "Nadia"});


            Console.WriteLine("Unsorted Dictionary Key Value Pairs");
            foreach (var item in dictionary)
            {
                Console.Write($"key :{item.Key}, Value :");
                foreach(var value in item.Value)
                {
                    Console.Write($"{value},");
                }
                Console.WriteLine();
            }

            Console.WriteLine("\n\n");

            Dictionary<int,string> sortedDictionary = new Dictionary<int, string>();
            foreach (var item in dictionary)
            {
                if(!sortedDictionary.ContainsKey(item.Key))
                {
                    sortedDictionary.Add(item.Key, item.Value[0]);
                }
            }

            Console.WriteLine("Sorted Dictionary Key Value Pairs");
            foreach (var item in sortedDictionary)
            {
                Console.WriteLine($"Key :{item.Key} , Value :{item.Value}");
            }
        }
    }
 }
